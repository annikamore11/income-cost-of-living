us_clean <- us_pop_data %>%
mutate(variable = recode(variable, !!!setNames(names(variables_of_interest), variables_of_interest))) %>%
select(GEOID, NAME, variable, estimate)
# Pivot to wide format
us_final <- us_clean %>%
pivot_wider(
names_from = variable,
values_from = estimate
)
us_final <- us_final %>%
mutate(
pct_female = female_pop / total_pop * 100,
pct_male = male_pop / total_pop * 100,
pct_white = white_alone / total_pop * 100,
pct_black = black_alone / total_pop * 100,
pct_am_indian = am_indian_alone / total_pop * 100,
pct_asian = asian_alone / total_pop * 100,
pct_pacificI = pacificI_alone / total_pop * 100,
pct_other = other_alone / total_pop * 100,
pct_two_or_more = two_or_more / total_pop * 100,
pct_divorced = (females_divorced + males_divorced) / pop_15_over,
pct_hs_or_higher = (highshool_grad + ged_alt_cred + some_college_less + some_college_more +
associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_ba_or_higher = (bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_doctorate = doctorate / pop_25_over * 100,
mean_household_income = ((mean_income_quin1 + mean_income_quin2 + mean_income_quin3 + mean_income_quin4 + mean_income_quin5)/5),
pct_uninsured = ((uninsured_under_19 + uninsured_19_30 + uninsured_35_64 + uninsured_65_over)/total_insur_pop)
) %>%
select(GEOID, NAME, total_pop, pct_female: pct_uninsured, gini_index)
View(us_clean)
View(us_final)
############################ State Table ###################################
state_pop_data <- get_acs(
geography = "state",
variables = variables_of_interest,
year = 2023,
survey = "acs5"
)
state_clean <- state_pop_data %>%
mutate(variable = recode(variable, !!!setNames(names(variables_of_interest), variables_of_interest))) %>%
select(GEOID, NAME, variable, estimate)
# Pivot to wide format
state_final <- state_clean %>%
pivot_wider(
names_from = variable,
values_from = estimate
)
state_final <- state_final %>%
mutate(
pct_female = female_pop / total_pop * 100,
pct_male = male_pop / total_pop * 100,
pct_white = white_alone / total_pop * 100,
pct_black = black_alone / total_pop * 100,
pct_am_indian = am_indian_alone / total_pop * 100,
pct_asian = asian_alone / total_pop * 100,
pct_pacificI = pacificI_alone / total_pop * 100,
pct_other = other_alone / total_pop * 100,
pct_two_or_more = two_or_more / total_pop * 100,
pct_divorced = (females_divorced + males_divorced) / pop_15_over,
pct_hs_or_higher = (highshool_grad + ged_alt_cred + some_college_less + some_college_more +
associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_ba_or_higher = (associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_doctorate = doctorate / pop_25_over * 100,
pct_uninsured = ((uninsured_under_19 + uninsured_19_30 + uninsured_35_64 + uninsured_65_over)/total_insur_pop)
) %>%
select(GEOID, NAME, total_pop, pct_female: pct_uninsured, gini_index)
View(state_final)
state_final <- state_final %>%
mutate(
pct_female = female_pop / total_pop * 100,
pct_male = male_pop / total_pop * 100,
pct_white = white_alone / total_pop * 100,
pct_black = black_alone / total_pop * 100,
pct_am_indian = am_indian_alone / total_pop * 100,
pct_asian = asian_alone / total_pop * 100,
pct_pacificI = pacificI_alone / total_pop * 100,
pct_other = other_alone / total_pop * 100,
pct_two_or_more = two_or_more / total_pop * 100,
pct_divorced = (females_divorced + males_divorced) / pop_15_over,
pct_hs_or_higher = (highshool_grad + ged_alt_cred + some_college_less + some_college_more +
associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_ba_or_higher = (associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_doctorate = doctorate / pop_25_over * 100,
mean_household_income = ((mean_income_quin1 + mean_income_quin2 + mean_income_quin3 + mean_income_quin4 + mean_income_quin5)/5),
pct_uninsured = ((uninsured_under_19 + uninsured_19_30 + uninsured_35_64 + uninsured_65_over)/total_insur_pop)
) %>%
select(GEOID, NAME, total_pop, pct_female: pct_uninsured, gini_index)
############################ State Table ###################################
state_pop_data <- get_acs(
geography = "state",
variables = variables_of_interest,
year = 2023,
survey = "acs5"
)
state_clean <- state_pop_data %>%
mutate(variable = recode(variable, !!!setNames(names(variables_of_interest), variables_of_interest))) %>%
select(GEOID, NAME, variable, estimate)
# Pivot to wide format
state_final <- state_clean %>%
pivot_wider(
names_from = variable,
values_from = estimate
)
state_final <- state_final %>%
mutate(
pct_female = female_pop / total_pop * 100,
pct_male = male_pop / total_pop * 100,
pct_white = white_alone / total_pop * 100,
pct_black = black_alone / total_pop * 100,
pct_am_indian = am_indian_alone / total_pop * 100,
pct_asian = asian_alone / total_pop * 100,
pct_pacificI = pacificI_alone / total_pop * 100,
pct_other = other_alone / total_pop * 100,
pct_two_or_more = two_or_more / total_pop * 100,
pct_divorced = (females_divorced + males_divorced) / pop_15_over,
pct_hs_or_higher = (highshool_grad + ged_alt_cred + some_college_less + some_college_more +
associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_ba_or_higher = (associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_doctorate = doctorate / pop_25_over * 100,
mean_household_income = ((mean_income_quin1 + mean_income_quin2 + mean_income_quin3 + mean_income_quin4 + mean_income_quin5)/5),
pct_uninsured = ((uninsured_under_19 + uninsured_19_30 + uninsured_35_64 + uninsured_65_over)/total_insur_pop)
) %>%
select(GEOID, NAME, total_pop, pct_female: pct_uninsured, gini_index)
View(state_final)
state_clean <- state_pop_data %>%
mutate(variable = recode(variable, !!!setNames(names(variables_of_interest), variables_of_interest))) %>%
select(GEOID, NAME, variable, estimate)
# Pivot to wide format
state_final <- state_clean %>%
pivot_wider(
names_from = variable,
values_from = estimate
)
state_final <- state_final %>%
mutate(
pct_female = female_pop / total_pop * 100,
pct_male = male_pop / total_pop * 100,
pct_white = white_alone / total_pop * 100,
pct_black = black_alone / total_pop * 100,
pct_am_indian = am_indian_alone / total_pop * 100,
pct_asian = asian_alone / total_pop * 100,
pct_pacificI = pacificI_alone / total_pop * 100,
pct_other = other_alone / total_pop * 100,
pct_two_or_more = two_or_more / total_pop * 100,
pct_divorced = (females_divorced + males_divorced) / pop_15_over,
pct_hs_or_higher = (highshool_grad + ged_alt_cred + some_college_less + some_college_more +
associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_ba_or_higher = (associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_doctorate = doctorate / pop_25_over * 100,
mean_household_income = ((mean_income_quin1 + mean_income_quin2 + mean_income_quin3 + mean_income_quin4 + mean_income_quin5)/5),
pct_uninsured = ((uninsured_under_19 + uninsured_19_30 + uninsured_35_64 + uninsured_65_over)/total_insur_pop)
) %>%
select(GEOID, NAME, total_pop, pct_female: pct_uninsured, med_household_income)
View(state_final)
state_clean <- state_pop_data %>%
mutate(variable = recode(variable, !!!setNames(names(variables_of_interest), variables_of_interest))) %>%
select(GEOID, NAME, variable, estimate)
# Pivot to wide format
state_final <- state_clean %>%
pivot_wider(
names_from = variable,
values_from = estimate
)
state_final <- state_final %>%
mutate(
pct_female = female_pop / total_pop * 100,
pct_male = male_pop / total_pop * 100,
pct_white = white_alone / total_pop * 100,
pct_black = black_alone / total_pop * 100,
pct_am_indian = am_indian_alone / total_pop * 100,
pct_asian = asian_alone / total_pop * 100,
pct_pacificI = pacificI_alone / total_pop * 100,
pct_other = other_alone / total_pop * 100,
pct_two_or_more = two_or_more / total_pop * 100,
pct_divorced = (females_divorced + males_divorced) / pop_15_over,
pct_hs_or_higher = (highshool_grad + ged_alt_cred + some_college_less + some_college_more +
associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_ba_or_higher = (associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_doctorate = doctorate / pop_25_over * 100,
mean_household_income = ((mean_income_quin1 + mean_income_quin2 + mean_income_quin3 + mean_income_quin4 + mean_income_quin5)/5),
pct_uninsured = ((uninsured_under_19 + uninsured_19_30 + uninsured_35_64 + uninsured_65_over)/total_insur_pop)
) %>%
select(GEOID, NAME, total_pop, pct_female: pct_uninsured, med_household_income, gini_index)
View(state_final)
# Search for variables containing a specific word or search for descriptions based on variable code
pop_vars <- acs_vars %>%
filter(grepl("B19013", name, ignore.case = TRUE))
library(tidycensus)
library(dplyr)
library(sf)
library(tigris)
library(tidyr)
library(writexl)
options(tigris_use_cache = TRUE)
# Set Census API key
census_api_key(Sys.getenv("CENSUS_API_KEY"), install = TRUE, overwrite = TRUE)
# Variable Selection
acs_vars <- load_variables(
2023,
dataset = c("acs5"),
cache = TRUE
)
# Search for variables containing a specific word or search for descriptions based on variable code
pop_vars <- acs_vars %>%
filter(grepl("B27010", name, ignore.case = TRUE))
# Choose variables
variables_of_interest <- c(
total_pop = "B01003_001",       # Total population
female_pop = "B01001_026",      # Total population of females
male_pop = "B01001_002",        # Total population of males
white_alone = "B02001_002",     # Population White alone
black_alone = "B02001_003",     # Population Black/African American alone
am_indian_alone = "B02001_004", # Population American Indian and Alaska Native alone
asian_alone = "B02001_005",     # Population Asian alone
pacificI_alone = "B02001_006",  # Population Pacific Islander and Native Hawaiian alone
other_alone = "B02001_007",     # Population Other alone
two_or_more = "B02001_008",     # Population Two or more races
pop_15_over = "B12001_001",
females_divorced = "B12001_019",
males_divorced = "B12001_010",
pop_25_over = "B15003_001",    # Population 25 and older
highshool_grad = "B15003_017",  # Graduated highschool
ged_alt_cred = "B15003_018",    # GED or alternative credential
some_college_less = "B15003_019", # Some college, less than 1 year
some_college_more = "B15003_020", # Some college, more than 1 year
associates = "B15003_021",        # Associates degree
bachelors = "B15003_022",         # Bachelors degree
masters = "B15003_023",           # Masters degree
prof_school = "B15003_024",       # Professional School degree
doctorate = "B15003_025",          # Doctorate Degree
med_household_income = "B19013_001",   # Median Household Income
total_insur_pop = "B27010_001",
uninsured_under_19 = "B27010_017",
uninsured_19_30 = "B27010_033",
uninsured_35_64 = "B27010_050",
uninsured_65_over = "B27010_066"
)
############################ USA Table ###################################
us_pop_data <- get_acs(
geography = "us",
variables = variables_of_interest,
year = 2023,
survey = "acs5"
)
us_clean <- us_pop_data %>%
mutate(variable = recode(variable, !!!setNames(names(variables_of_interest), variables_of_interest))) %>%
select(GEOID, NAME, variable, estimate)
# Pivot to wide format
us_final <- us_clean %>%
pivot_wider(
names_from = variable,
values_from = estimate
)
us_final <- us_final %>%
mutate(
pct_female = female_pop / total_pop * 100,
pct_male = male_pop / total_pop * 100,
pct_white = white_alone / total_pop * 100,
pct_black = black_alone / total_pop * 100,
pct_am_indian = am_indian_alone / total_pop * 100,
pct_asian = asian_alone / total_pop * 100,
pct_pacificI = pacificI_alone / total_pop * 100,
pct_other = other_alone / total_pop * 100,
pct_two_or_more = two_or_more / total_pop * 100,
pct_divorced = (females_divorced + males_divorced) / pop_15_over,
pct_hs_or_higher = (highshool_grad + ged_alt_cred + some_college_less + some_college_more +
associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_ba_or_higher = (bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_doctorate = doctorate / pop_25_over * 100,
pct_uninsured = ((uninsured_under_19 + uninsured_19_30 + uninsured_35_64 + uninsured_65_over)/total_insur_pop)
) %>%
select(GEOID, NAME, total_pop, pct_female: pct_uninsured, med_household_income)
############################ County Table ###################################
counties_pop_data <- get_acs(
geography = "county",
variables = variables_of_interest,
year = 2023,
survey = "acs5"
)
counties_clean <- counties_pop_data %>%
mutate(variable = recode(variable, !!!setNames(names(variables_of_interest), variables_of_interest))) %>%
select(GEOID, NAME, variable, estimate)
# Pivot to wide format
counties_final <- counties_clean %>%
pivot_wider(
names_from = variable,
values_from = estimate
)
counties_final <- counties_final %>%
mutate(
pct_female = female_pop / total_pop * 100,
pct_male = male_pop / total_pop * 100,
pct_white = white_alone / total_pop * 100,
pct_black = black_alone / total_pop * 100,
pct_am_indian = am_indian_alone / total_pop * 100,
pct_asian = asian_alone / total_pop * 100,
pct_pacificI = pacificI_alone / total_pop * 100,
pct_other = other_alone / total_pop * 100,
pct_two_or_more = two_or_more / total_pop * 100,
pct_divorced = (females_divorced + males_divorced) / pop_15_over,
pct_hs_or_higher = (highshool_grad + ged_alt_cred + some_college_less + some_college_more +
associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_ba_or_higher = (bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_doctorate = doctorate / pop_25_over * 100,
pct_uninsured = ((uninsured_under_19 + uninsured_19_30 + uninsured_35_64 + uninsured_65_over)/total_insur_pop)
) %>%
select(GEOID, NAME, total_pop, pct_female: pct_uninsured, med_household_income)
counties_final <- counties_final %>%
separate(NAME, into = c("NAME", "state_name"), sep = ", ", remove = TRUE)
############################ Congressional District Table ###################################
cd_pop_data <- get_acs(
geography = "congressional district",
variables = variables_of_interest,
year = 2023,
survey = "acs5"
)
cd_clean <- cd_pop_data %>%
mutate(variable = recode(variable, !!!setNames(names(variables_of_interest), variables_of_interest))) %>%
select(GEOID, variable, NAME, estimate)
# Pivot to wide format
cd_final <- cd_clean %>%
pivot_wider(
names_from = variable,
values_from = estimate
)
cd_final <- cd_final %>%
mutate(
pct_female = female_pop / total_pop * 100,
pct_male = male_pop / total_pop * 100,
pct_white = white_alone / total_pop * 100,
pct_black = black_alone / total_pop * 100,
pct_am_indian = am_indian_alone / total_pop * 100,
pct_asian = asian_alone / total_pop * 100,
pct_pacificI = pacificI_alone / total_pop * 100,
pct_other = other_alone / total_pop * 100,
pct_two_or_more = two_or_more / total_pop * 100,
pct_divorced = (females_divorced + males_divorced) / pop_15_over,
pct_hs_or_higher = (highshool_grad + ged_alt_cred + some_college_less + some_college_more +
associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_ba_or_higher = (bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_doctorate = doctorate / pop_25_over * 100,
pct_uninsured = ((uninsured_under_19 + uninsured_19_30 + uninsured_35_64 + uninsured_65_over)/total_insur_pop)
) %>%
select(GEOID, NAME, total_pop, pct_female: pct_uninsured, med_household_income)
cd_final <- cd_final %>%
separate(NAME, into = c("NAME", "state_name"), sep = ", ", remove = TRUE)
############################ State Table ###################################
state_pop_data <- get_acs(
geography = "state",
variables = variables_of_interest,
year = 2023,
survey = "acs5"
)
state_clean <- state_pop_data %>%
mutate(variable = recode(variable, !!!setNames(names(variables_of_interest), variables_of_interest))) %>%
select(GEOID, NAME, variable, estimate)
# Pivot to wide format
state_final <- state_clean %>%
pivot_wider(
names_from = variable,
values_from = estimate
)
state_final <- state_final %>%
mutate(
pct_female = female_pop / total_pop * 100,
pct_male = male_pop / total_pop * 100,
pct_white = white_alone / total_pop * 100,
pct_black = black_alone / total_pop * 100,
pct_am_indian = am_indian_alone / total_pop * 100,
pct_asian = asian_alone / total_pop * 100,
pct_pacificI = pacificI_alone / total_pop * 100,
pct_other = other_alone / total_pop * 100,
pct_two_or_more = two_or_more / total_pop * 100,
pct_divorced = (females_divorced + males_divorced) / pop_15_over,
pct_hs_or_higher = (highshool_grad + ged_alt_cred + some_college_less + some_college_more +
associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_ba_or_higher = (associates + bachelors + masters + prof_school + doctorate) / pop_25_over * 100,
pct_doctorate = doctorate / pop_25_over * 100,
pct_uninsured = ((uninsured_under_19 + uninsured_19_30 + uninsured_35_64 + uninsured_65_over)/total_insur_pop)
) %>%
select(GEOID, NAME, total_pop, pct_female: pct_uninsured, med_household_income)
######################## Write Files To CSV ##############################
write_xlsx(us_final, "data/attribute/US_level_census_data.xlsx", row.names = FALSE)
write_xlsx(us_final, "data/attribute/US_level_census_data.xlsx")
write_xlsx(counties_final, "data/attribute/county_level_census_data.xlsx")
write_xlsx(cd_final, "data/attribute/congressional_district_level_census_data.xlsx")
write_xlsx(state_final, "data/attribute/state_level_census_data.xlsx")
View(state_final)
View(us_final)
setwd("~/Desktop/Data Directories/open_data/Inflation")
runApp('PI_app.R')
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(stringr)
# BEA API key
api_key <- "8EFE9A6B-9DAC-4EA0-AB27-F51E54E51B84"
# Base API URL
base_url <- "https://apps.bea.gov/api/data/"
# Parameters for Real Per Capita Personal Income (National Dollars) (Constant 2017 Dollars)
params_RPCPI <- list(
UserID = api_key,
method = "GetData",
datasetname = "Regional",
TableName = "SARPP",         # Real GDP
LineCode = 2,         # All counties
GeoFips = "STATE",
Year = "LAST10",
ResultFormat = "JSON"
)
# Fetch state real per capita income
res_RPCPI <- GET(url = base_url, query = params_RPCPI)
data_RPCPI <- fromJSON(content(res_RPCPI, as = "text"))$BEAAPI$Results$Data
state_RPCPI <- as.data.frame(data_RPCPI) %>%
filter(grepl("^[0-9]{5}$", GeoFips)) %>%        # Valid 5-digit FIPS
mutate(
DataValue = as.numeric(gsub(",", "", DataValue)),
Year = as.integer(TimePeriod)
) %>%
select(GeoFips, GeoName, Year, DataValue) %>%
rename(real_pc_personal_income = DataValue)
###############################################
# Parameters for Regional Price Parities
params_RPP <- list(
UserID = api_key,
method = "GetData",
datasetname = "Regional",
TableName = "SARPP",         # Real GDP
LineCode = 5,         # All counties
GeoFips = "STATE",
Year = "LAST10",
ResultFormat = "JSON"
)
# Fetch state real per capita income
res_RPP <- GET(url = base_url, query = params_RPP)
data_RPP <- fromJSON(content(res_RPP, as = "text"))$BEAAPI$Results$Data
state_RPP <- as.data.frame(data_RPP) %>%
filter(grepl("^[0-9]{5}$", GeoFips)) %>%        # Valid 5-digit FIPS
mutate(
DataValue = as.numeric(gsub(",", "", DataValue)),
Year = as.integer(TimePeriod)
) %>%
select(GeoFips, GeoName, Year, DataValue) %>%
rename(rpp_all_goods = DataValue)
state_combined <- state_RPCPI %>%
left_join(state_RPP %>% select(GeoName, Year, rpp_all_goods),
by = c("GeoName", "Year")
)
state_combined <- state_combined  %>%
mutate(
local_purchasing_power = real_pc_personal_income / (rpp_all_goods / 100)
)
View(state_RPP)
Sys.getenv("CENSUS_API_KEY")
library(tidycensus)
# Set your Census API key
census_api_key("04501a46e2d2db29ccf0181a051065b6707245a4", install = TRUE, overwrite = TRUE)
# Years 2014-2023
years <- 2014:2023
get_acs(
geography = "state",
table = "B19013_001",
year = y,
survey = "acs1",       # or "acs5" if you prefer 5-year estimates
cache_table = TRUE
) %>%
select(GEOID, NAME, year = y, estimate)
get_acs(
geography = "state",
table = "B19013_001",
year = years,
survey = "acs1",       # or "acs5" if you prefer 5-year estimates
cache_table = TRUE
) %>%
select(GEOID, NAME, year = years, estimate)
# Combine into one dataframe
median_income_df <- bind_rows(median_income_list)
get_acs(
geography = "state",
table = "B19013_001",
year = years,
survey = "acs5",       # or "acs5" if you prefer 5-year estimates
cache_table = TRUE
) %>%
select(GEOID, NAME, year = years, estimate)
get_acs(
geography = "state",
variables = "B19013_001",
year = years,
survey = "acs5",       # or "acs5" if you prefer 5-year estimates
cache_table = TRUE
) %>%
select(GEOID, NAME, year = years, estimate)
# Loop to get median household income for all states
median_income_list <- lapply(years, function(y) {
get_acs(
geography = "state",
variables = "B19013_001",
year = years,
survey = "acs5",       # or "acs5" if you prefer 5-year estimates
cache_table = TRUE
) %>%
select(GEOID, NAME, year = years, estimate)
})
get_acs(
geography = "state",
variables = "B19013_001",
year = years,
survey = "acs5"
) %>%
select(GEOID, NAME, year = years, estimate)
